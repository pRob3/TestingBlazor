@page "/learn/bindprop"

<div class="row">
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Playground</h3>
        <hr />
        IsActive: <input type="checkbox" @bind="Product.IsActive" /> <br />
        Input Price:<input type="number" @bind-value="Product.Price" @bind-value:event="oninput" /> <br />

        <br />
        Product Properties:
        <select @bind="selectedProp">
            @foreach (var prop in Product.ProductProperties)
            {
                <option value="@prop.Key">@prop.Key</option>
            }
        </select>
    </div>
    <div class="col-6 border p-3">
        <h3 class="text-primary">Product Summary</h3>
        <hr />

        Name: @Product.Name <br />
        Price: @Product.Price <br />
        This Product is: @(Product.IsActive ? "Active" : "InActive")<br />

        <br />
        Selected Prop: @selectedProp
        @if (!string.IsNullOrEmpty(selectedProp))
        {
            <p>Selected Value: @Product.ProductProperties.FirstOrDefault(x => x.Key == selectedProp)?.Value</p>
        }
    </div>

    <div class="col-12 border p-3">
        <h2 class="text-success">Product Table</h2>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Product Name</th>
                    <th>Price</th>
                    <th>Is Active</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in ProductList)
                {
                    <tr>
                        <td><input type="text" @bind="product.Name" @bind:event="oninput" /></td>
                        <td><input type="text" @bind="product.Price" @bind:event="oninput" /></td>
                        <td><input type="checkbox" @bind="product.IsActive" /></td>
                    </tr>
                }
            </tbody>
        </table>

        <br />
        <h2>Product Summary</h2>
        @foreach (var prod in ProductList)
        {
            <p>
                @prod.Name [@prod.Price] is @(prod.IsActive ? "Active" : "InActive")
            </p>
        }
    </div>
</div>




@code {
    private string selectedProp = string.Empty;
    Product Product = new()
    {
        Id = 1,
        Name = "Product 1",
        IsActive = true,
        Price = 101,
        ProductProperties = new List<Product_Prop>()
        {
            new Product_Prop { Id = 1, Key = "Color", Value = "Red" },
            new Product_Prop { Id = 2, Key = "Size", Value = "20g" },
            new Product_Prop { Id = 3, Key = "Flavor", Value = "Rose" }
        }
    };

    List<Product> ProductList = new();

    override protected void OnInitialized()
    {
        ProductList.Add(new()
            {
                Id = 1,
                Name = "Midnight Blaze",
                IsActive = false,
                ProductProperties = new List<Product_Prop>()
                {
                new Product_Prop { Id = 1, Key = "Flavor", Value = "Rose"},
                     new Product_Prop { Id = 2, Key = "Size", Value = "20oz"},
                    new Product_Prop { Id = 3, Key = "Color", Value="Purple" }
                }
            });

        ProductList.Add(new()
            {
                Id = 2,
                Name = "Blossom Lily",
                IsActive = true,
                ProductProperties = new List<Product_Prop>()
            {
                new Product_Prop { Id = 1, Key = "Flavor", Value = "Lily" },
                new Product_Prop { Id = 2, Key = "Size", Value = "18oz" },
                new Product_Prop {Id = 3,Key = "Color",Value = "White"}
            }
            });
    }
}
